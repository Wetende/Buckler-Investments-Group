---
description: Admin forms, data management, and CRUD operation patterns for DashLite
globs: admin/src/components/**,admin/src/pages/**,admin/src/forms/**
alwaysApply: true
---

# Admin Forms & Data Management

Purpose: Establish consistent patterns for admin forms, data management, CRUD operations, and administrative workflows in the DashLite admin interface.

## Admin Form Patterns

### Form Structure with DashLite
```jsx
// admin/src/components/forms/UserForm.jsx
import React from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { 
    Block, BlockHead, BlockContent, BlockTitle, 
    Row, Col, Button, InputSwitch 
} from '@/components/Component';

// Admin validation schema
const userSchema = z.object({
    name: z.string().min(2, 'Name must be at least 2 characters'),
    email: z.string().email('Invalid email address'),
    role: z.enum(['admin', 'manager', 'user'], 'Invalid role'),
    is_active: z.boolean(),
    permissions: z.array(z.string()).optional(),
});

const UserForm = ({ user = null, onSubmit, onCancel }) => {
    const { 
        register, 
        handleSubmit, 
        formState: { errors, isSubmitting },
        setValue,
        watch
    } = useForm({
        resolver: zodResolver(userSchema),
        defaultValues: {
            name: user?.name || '',
            email: user?.email || '',
            role: user?.role || 'user',
            is_active: user?.is_active ?? true,
            permissions: user?.permissions || []
        }
    });

    const watchedRole = watch('role');

    const handleFormSubmit = async (data) => {
        try {
            await onSubmit({
                id: user?.id || 0,
                ...data
            });
        } catch (error) {
            console.error('Form submission error:', error);
        }
    };

    return (
        <Block>
            <BlockHead>
                <BlockTitle>{user ? 'Edit' : 'Create'} User</BlockTitle>
            </BlockHead>
            <BlockContent>
                <form onSubmit={handleSubmit(handleFormSubmit)} className="admin-form">
                    <div className="card card-bordered">
                        <div className="card-inner">
                            <Row className="g-4">
                                <Col sm="6">
                                    <div className="form-group">
                                        <label className="form-label">Full Name</label>
                                        <div className="form-control-wrap">
                                            <input 
                                                type="text" 
                                                className={`form-control ${errors.name ? 'error' : ''}`}
                                                {...register('name')}
                                                placeholder="Enter full name"
                                            />
                                            {errors.name && (
                                                <span className="form-note-error">
                                                    {errors.name.message}
                                                </span>
                                            )}
                                        </div>
                                    </div>
                                </Col>
                                
                                <Col sm="6">
                                    <div className="form-group">
                                        <label className="form-label">Email Address</label>
                                        <div className="form-control-wrap">
                                            <input 
                                                type="email" 
                                                className={`form-control ${errors.email ? 'error' : ''}`}
                                                {...register('email')}
                                                placeholder="Enter email address"
                                            />
                                            {errors.email && (
                                                <span className="form-note-error">
                                                    {errors.email.message}
                                                </span>
                                            )}
                                        </div>
                                    </div>
                                </Col>
                                
                                <Col sm="6">
                                    <div className="form-group">
                                        <label className="form-label">Role</label>
                                        <div className="form-control-wrap">
                                            <select 
                                                className={`form-select ${errors.role ? 'error' : ''}`}
                                                {...register('role')}
                                            >
                                                <option value="">Select Role</option>
                                                <option value="user">User</option>
                                                <option value="manager">Manager</option>
                                                <option value="admin">Admin</option>
                                            </select>
                                            {errors.role && (
                                                <span className="form-note-error">
                                                    {errors.role.message}
                                                </span>
                                            )}
                                        </div>
                                    </div>
                                </Col>
                                
                                <Col sm="6">
                                    <div className="form-group">
                                        <div className="custom-control custom-switch">
                                            <input 
                                                type="checkbox" 
                                                className="custom-control-input" 
                                                id="is_active"
                                                {...register('is_active')}
                                            />
                                            <label className="custom-control-label" htmlFor="is_active">
                                                Active User
                                            </label>
                                        </div>
                                        <div className="form-note">
                                            Active users can log in and access the platform
                                        </div>
                                    </div>
                                </Col>
                                
                                {watchedRole === 'admin' && (
                                    <Col sm="12">
                                        <div className="form-group">
                                            <label className="form-label">Admin Permissions</label>
                                            <div className="custom-control-group">
                                                {['users', 'properties', 'bookings', 'analytics'].map(permission => (
                                                    <div key={permission} className="custom-control custom-checkbox">
                                                        <input 
                                                            type="checkbox" 
                                                            className="custom-control-input" 
                                                            id={`perm_${permission}`}
                                                            value={permission}
                                                            {...register('permissions')}
                                                        />
                                                        <label className="custom-control-label" htmlFor={`perm_${permission}`}>
                                                            Manage {permission.charAt(0).toUpperCase() + permission.slice(1)}
                                                        </label>
                                                    </div>
                                                ))}
                                            </div>
                                        </div>
                                    </Col>
                                )}
                            </Row>
                        </div>
                    </div>
                    
                    <div className="form-group mt-4">
                        <Button 
                            type="submit" 
                            color="primary" 
                            size="lg"
                            disabled={isSubmitting}
                        >
                            {isSubmitting ? 'Saving...' : (user ? 'Update' : 'Create')} User
                        </Button>
                        <Button 
                            type="button" 
                            color="light" 
                            size="lg" 
                            className="ml-2"
                            onClick={onCancel}
                        >
                            Cancel
                        </Button>
                    </div>
                </form>
            </BlockContent>
        </Block>
    );
};

export default UserForm;
```

## Data Management Components

### Admin Data Table with Actions
```jsx
// admin/src/components/data/AdminDataTable.jsx
import React, { useState } from 'react';
import { 
    DataTable, DataTableBody, DataTableHead, DataTableRow, 
    DataTableItem, Button, UserAvatar
} from '@/components/Component';

const AdminDataTable = ({ 
    data = [], 
    columns = [], 
    actions = [],
    onEdit,
    onDelete,
    onBulkAction,
    loading = false,
    selectable = false 
}) => {
    const [selectedItems, setSelectedItems] = useState(new Set());
    const [bulkAction, setBulkAction] = useState('');

    const handleSelectAll = (checked) => {
        if (checked) {
            setSelectedItems(new Set(data.map(item => item.id)));
        } else {
            setSelectedItems(new Set());
        }
    };

    const handleSelectItem = (itemId, checked) => {
        const newSelected = new Set(selectedItems);
        if (checked) {
            newSelected.add(itemId);
        } else {
            newSelected.delete(itemId);
        }
        setSelectedItems(newSelected);
    };

    const handleBulkActionSubmit = () => {
        if (bulkAction && selectedItems.size > 0) {
            onBulkAction?.(bulkAction, Array.from(selectedItems));
            setSelectedItems(new Set());
            setBulkAction('');
        }
    };

    if (loading) {
        return (
            <div className="d-flex justify-content-center p-4">
                <div className="spinner-border text-primary" role="status">
                    <span className="sr-only">Loading...</span>
                </div>
            </div>
        );
    }

    return (
        <div className="admin-data-table">
            {selectable && selectedItems.size > 0 && (
                <div className="bulk-actions mb-3 p-3 bg-light rounded">
                    <div className="d-flex align-items-center">
                        <span className="mr-3">
                            {selectedItems.size} item(s) selected
                        </span>
                        <select 
                            className="form-select form-select-sm mr-2" 
                            style={{ width: 'auto' }}
                            value={bulkAction}
                            onChange={(e) => setBulkAction(e.target.value)}
                        >
                            <option value="">Bulk Actions</option>
                            <option value="activate">Activate</option>
                            <option value="deactivate">Deactivate</option>
                            <option value="delete">Delete</option>
                        </select>
                        <Button 
                            size="sm" 
                            color="primary" 
                            onClick={handleBulkActionSubmit}
                            disabled={!bulkAction}
                        >
                            Apply
                        </Button>
                    </div>
                </div>
            )}
            
            <DataTable>
                <DataTableBody>
                    <DataTableHead>
                        {selectable && (
                            <DataTableRow>
                                <div className="custom-control custom-checkbox">
                                    <input 
                                        type="checkbox" 
                                        className="custom-control-input" 
                                        id="selectAll"
                                        checked={selectedItems.size === data.length && data.length > 0}
                                        onChange={(e) => handleSelectAll(e.target.checked)}
                                    />
                                    <label className="custom-control-label" htmlFor="selectAll"></label>
                                </div>
                            </DataTableRow>
                        )}
                        {columns.map((column, index) => (
                            <DataTableRow key={index} size={column.size}>
                                <span className="sub-text">{column.title}</span>
                            </DataTableRow>
                        ))}
                        {actions.length > 0 && (
                            <DataTableRow className="nk-tb-col-tools text-right">
                                <span className="sub-text">Actions</span>
                            </DataTableRow>
                        )}
                    </DataTableHead>
                    
                    {data.map((item, index) => (
                        <DataTableItem key={item.id || index}>
                            {selectable && (
                                <DataTableRow>
                                    <div className="custom-control custom-checkbox">
                                        <input 
                                            type="checkbox" 
                                            className="custom-control-input" 
                                            id={`select_${item.id}`}
                                            checked={selectedItems.has(item.id)}
                                            onChange={(e) => handleSelectItem(item.id, e.target.checked)}
                                        />
                                        <label className="custom-control-label" htmlFor={`select_${item.id}`}></label>
                                    </div>
                                </DataTableRow>
                            )}
                            {columns.map((column, colIndex) => (
                                <DataTableRow key={colIndex} size={column.size}>
                                    {column.render ? column.render(item) : item[column.key]}
                                </DataTableRow>
                            ))}
                            {actions.length > 0 && (
                                <DataTableRow className="nk-tb-col-tools">
                                    <ul className="nk-tb-actions gx-1">
                                        {actions.map((action, actionIndex) => (
                                            <li key={actionIndex}>
                                                <Button
                                                    size="sm"
                                                    color={action.color || 'light'}
                                                    outline
                                                    onClick={() => action.onClick(item)}
                                                    disabled={action.disabled?.(item)}
                                                    title={action.title}
                                                >
                                                    {action.icon && <em className={`icon ni ni-${action.icon}`}></em>}
                                                    {action.label}
                                                </Button>
                                            </li>
                                        ))}
                                    </ul>
                                </DataTableRow>
                            )}
                        </DataTableItem>
                    ))}
                </DataTableBody>
            </DataTable>
        </div>
    );
};

export default AdminDataTable;
```

## CRUD Operation Patterns

### Admin Resource Manager
```jsx
// admin/src/components/AdminResourceManager.jsx
import React, { useState } from 'react';
import { Modal, ModalBody } from 'reactstrap';
import { 
    Block, BlockHead, BlockContent, BlockTitle, BlockBetween,
    Button, Icon
} from '@/components/Component';
import AdminDataTable from './data/AdminDataTable';

const AdminResourceManager = ({
    title,
    data = [],
    columns = [],
    loading = false,
    error = null,
    FormComponent,
    onRefresh,
    onCreate,
    onUpdate,
    onDelete,
    onBulkAction
}) => {
    const [showModal, setShowModal] = useState(false);
    const [editingItem, setEditingItem] = useState(null);
    const [deleteConfirm, setDeleteConfirm] = useState(null);

    const handleCreate = () => {
        setEditingItem(null);
        setShowModal(true);
    };

    const handleEdit = (item) => {
        setEditingItem(item);
        setShowModal(true);
    };

    const handleDelete = (item) => {
        setDeleteConfirm(item);
    };

    const confirmDelete = async () => {
        if (deleteConfirm) {
            await onDelete(deleteConfirm.id);
            setDeleteConfirm(null);
        }
    };

    const handleFormSubmit = async (formData) => {
        try {
            if (editingItem) {
                await onUpdate(editingItem.id, formData);
            } else {
                await onCreate(formData);
            }
            setShowModal(false);
            setEditingItem(null);
        } catch (error) {
            console.error('Operation failed:', error);
        }
    };

    const actions = [
        {
            label: 'Edit',
            icon: 'edit',
            color: 'primary',
            onClick: handleEdit
        },
        {
            label: 'Delete',
            icon: 'trash',
            color: 'danger',
            onClick: handleDelete
        }
    ];

    if (error) {
        return (
            <Block>
                <div className="alert alert-danger">
                    <h6>Error Loading {title}</h6>
                    <p>{error.message}</p>
                    <Button color="primary" outline onClick={onRefresh}>
                        Try Again
                    </Button>
                </div>
            </Block>
        );
    }

    return (
        <>
            <Block>
                <BlockHead>
                    <BlockBetween>
                        <div>
                            <BlockTitle>{title}</BlockTitle>
                            <p className="text-soft">
                                Manage your {title.toLowerCase()} data
                            </p>
                        </div>
                        <div className="nk-block-head-content">
                            <div className="toggle-wrap nk-block-tools-toggle">
                                <Button color="primary" onClick={handleCreate}>
                                    <Icon name="plus" />
                                    <span>Add {title.slice(0, -1)}</span>
                                </Button>
                            </div>
                        </div>
                    </BlockBetween>
                </BlockHead>
                
                <BlockContent>
                    <AdminDataTable
                        data={data}
                        columns={columns}
                        actions={actions}
                        loading={loading}
                        selectable={true}
                        onBulkAction={onBulkAction}
                    />
                </BlockContent>
            </Block>

            {/* Form Modal */}
            <Modal 
                isOpen={showModal} 
                toggle={() => setShowModal(false)} 
                className="modal-dialog-centered" 
                size="lg"
            >
                <ModalBody>
                    <a 
                        href="#close" 
                        onClick={(e) => {
                            e.preventDefault();
                            setShowModal(false);
                        }} 
                        className="close"
                    >
                        <Icon name="cross-sm" />
                    </a>
                    <div className="p-2">
                        <h5 className="title">
                            {editingItem ? 'Edit' : 'Create'} {title.slice(0, -1)}
                        </h5>
                        <div className="mt-4">
                            {FormComponent && (
                                <FormComponent
                                    item={editingItem}
                                    onSubmit={handleFormSubmit}
                                    onCancel={() => setShowModal(false)}
                                />
                            )}
                        </div>
                    </div>
                </ModalBody>
            </Modal>

            {/* Delete Confirmation Modal */}
            <Modal 
                isOpen={!!deleteConfirm} 
                toggle={() => setDeleteConfirm(null)} 
                className="modal-dialog-centered"
            >
                <ModalBody>
                    <div className="text-center">
                        <div className="nk-modal-icon">
                            <Icon name="alert-circle" className="text-danger" style={{ fontSize: '4rem' }} />
                        </div>
                        <h4 className="nk-modal-title">Confirm Deletion</h4>
                        <div className="nk-modal-text">
                            <p>Are you sure you want to delete this {title.slice(0, -1).toLowerCase()}?</p>
                            <p className="text-soft">This action cannot be undone.</p>
                        </div>
                        <div className="d-flex justify-content-center g-3">
                            <Button 
                                color="danger" 
                                onClick={confirmDelete}
                            >
                                Yes, Delete
                            </Button>
                            <Button 
                                color="light" 
                                onClick={() => setDeleteConfirm(null)}
                            >
                                Cancel
                            </Button>
                        </div>
                    </div>
                </ModalBody>
            </Modal>
        </>
    );
};

export default AdminResourceManager;
```

## File Upload Management

### Admin File Upload Component
```jsx
// admin/src/components/forms/FileUpload.jsx
import React, { useState, useCallback } from 'react';
import { useDropzone } from 'react-dropzone';
import { Button, Icon, Progress } from '@/components/Component';

const AdminFileUpload = ({
    onUpload,
    acceptedTypes = {
        'image/*': ['.png', '.jpg', '.jpeg', '.gif'],
        'application/pdf': ['.pdf']
    },
    maxSize = 5242880, // 5MB
    multiple = false,
    existingFiles = []
}) => {
    const [uploading, setUploading] = useState(false);
    const [uploadProgress, setUploadProgress] = useState(0);
    const [files, setFiles] = useState(existingFiles);

    const onDrop = useCallback(async (acceptedFiles) => {
        setUploading(true);
        setUploadProgress(0);

        try {
            for (const file of acceptedFiles) {
                const formData = new FormData();
                formData.append('file', file);

                // Simulate upload progress
                const interval = setInterval(() => {
                    setUploadProgress(prev => Math.min(prev + 10, 90));
                }, 200);

                const uploadedFile = await onUpload(formData);
                
                clearInterval(interval);
                setUploadProgress(100);

                setFiles(prev => [...prev, uploadedFile]);
            }
        } catch (error) {
            console.error('Upload failed:', error);
        } finally {
            setUploading(false);
            setUploadProgress(0);
        }
    }, [onUpload]);

    const { getRootProps, getInputProps, isDragActive } = useDropzone({
        onDrop,
        accept: acceptedTypes,
        maxSize,
        multiple
    });

    const removeFile = (fileId) => {
        setFiles(prev => prev.filter(file => file.id !== fileId));
    };

    return (
        <div className="admin-file-upload">
            <div 
                {...getRootProps()} 
                className={`dropzone ${isDragActive ? 'active' : ''} ${uploading ? 'uploading' : ''}`}
                style={{
                    border: '2px dashed #ccc',
                    borderRadius: '8px',
                    padding: '2rem',
                    textAlign: 'center',
                    cursor: 'pointer',
                    backgroundColor: isDragActive ? '#f8f9fa' : 'transparent'
                }}
            >
                <input {...getInputProps()} />
                
                {uploading ? (
                    <div>
                        <Icon name="upload" style={{ fontSize: '3rem', color: '#007bff' }} />
                        <p>Uploading files...</p>
                        <Progress value={uploadProgress} className="mt-2" />
                        <p className="text-muted">{uploadProgress}% complete</p>
                    </div>
                ) : (
                    <div>
                        <Icon name="upload" style={{ fontSize: '3rem', color: '#6c757d' }} />
                        <p>
                            {isDragActive 
                                ? 'Drop the files here...' 
                                : 'Drag & drop files here, or click to select'
                            }
                        </p>
                        <p className="text-muted">
                            Max file size: {Math.round(maxSize / 1024 / 1024)}MB
                        </p>
                    </div>
                )}
            </div>

            {files.length > 0 && (
                <div className="uploaded-files mt-3">
                    <h6>Uploaded Files</h6>
                    <div className="file-list">
                        {files.map((file, index) => (
                            <div key={file.id || index} className="file-item d-flex align-items-center justify-content-between p-2 border rounded mb-2">
                                <div className="d-flex align-items-center">
                                    <Icon name="file" className="mr-2" />
                                    <span>{file.name || file.original_name}</span>
                                    <span className="text-muted ml-2">
                                        ({Math.round((file.size || 0) / 1024)}KB)
                                    </span>
                                </div>
                                <Button 
                                    size="sm" 
                                    color="danger" 
                                    outline
                                    onClick={() => removeFile(file.id)}
                                >
                                    <Icon name="trash" />
                                </Button>
                            </div>
                        ))}
                    </div>
                </div>
            )}
        </div>
    );
};

export default AdminFileUpload;
```

## Search & Filter Patterns

### Admin Search & Filter Bar
```jsx
// admin/src/components/filters/AdminSearchFilter.jsx
import React, { useState, useEffect } from 'react';
import { Row, Col, Button, Icon } from '@/components/Component';

const AdminSearchFilter = ({
    onSearch,
    onFilter,
    filterOptions = {},
    searchPlaceholder = 'Search...',
    className = ''
}) => {
    const [searchQuery, setSearchQuery] = useState('');
    const [filters, setFilters] = useState({});
    const [showFilters, setShowFilters] = useState(false);

    useEffect(() => {
        const debounceTimer = setTimeout(() => {
            onSearch?.(searchQuery);
        }, 300);

        return () => clearTimeout(debounceTimer);
    }, [searchQuery, onSearch]);

    const handleFilterChange = (key, value) => {
        const newFilters = { ...filters, [key]: value };
        setFilters(newFilters);
        onFilter?.(newFilters);
    };

    const clearFilters = () => {
        setFilters({});
        setSearchQuery('');
        onFilter?.({});
        onSearch?.('');
    };

    const hasActiveFilters = Object.values(filters).some(value => value && value !== '');

    return (
        <div className={`admin-search-filter ${className}`}>
            <Row className="g-3 align-items-center mb-3">
                <Col sm="6">
                    <div className="form-control-wrap">
                        <div className="form-icon form-icon-right">
                            <Icon name="search" />
                        </div>
                        <input
                            type="text"
                            className="form-control"
                            placeholder={searchPlaceholder}
                            value={searchQuery}
                            onChange={(e) => setSearchQuery(e.target.value)}
                        />
                    </div>
                </Col>
                <Col sm="6">
                    <div className="d-flex justify-content-end">
                        <Button
                            color="light"
                            outline
                            onClick={() => setShowFilters(!showFilters)}
                            className="mr-2"
                        >
                            <Icon name="filter" />
                            Filters
                            {hasActiveFilters && (
                                <span className="badge badge-primary ml-1">
                                    {Object.values(filters).filter(v => v && v !== '').length}
                                </span>
                            )}
                        </Button>
                        {hasActiveFilters && (
                            <Button
                                color="light"
                                outline
                                onClick={clearFilters}
                            >
                                Clear
                            </Button>
                        )}
                    </div>
                </Col>
            </Row>

            {showFilters && (
                <div className="filter-panel p-3 bg-light rounded mb-3">
                    <Row className="g-3">
                        {Object.entries(filterOptions).map(([key, option]) => (
                            <Col key={key} sm="6" md="4">
                                <div className="form-group">
                                    <label className="form-label">{option.label}</label>
                                    {option.type === 'select' ? (
                                        <select
                                            className="form-select"
                                            value={filters[key] || ''}
                                            onChange={(e) => handleFilterChange(key, e.target.value)}
                                        >
                                            <option value="">All {option.label}</option>
                                            {option.options.map(opt => (
                                                <option key={opt.value} value={opt.value}>
                                                    {opt.label}
                                                </option>
                                            ))}
                                        </select>
                                    ) : option.type === 'date' ? (
                                        <input
                                            type="date"
                                            className="form-control"
                                            value={filters[key] || ''}
                                            onChange={(e) => handleFilterChange(key, e.target.value)}
                                        />
                                    ) : (
                                        <input
                                            type="text"
                                            className="form-control"
                                            placeholder={option.placeholder}
                                            value={filters[key] || ''}
                                            onChange={(e) => handleFilterChange(key, e.target.value)}
                                        />
                                    )}
                                </div>
                            </Col>
                        ))}
                    </Row>
                </div>
            )}
        </div>
    );
};

export default AdminSearchFilter;
```

## Data Export & Import

### Admin Export Component
```jsx
// admin/src/components/data/AdminExport.jsx
import React, { useState } from 'react';
import { Button, Icon } from '@/components/Component';

const AdminExport = ({
    onExport,
    formats = ['csv', 'xlsx', 'pdf'],
    className = ''
}) => {
    const [exporting, setExporting] = useState(false);
    const [selectedFormat, setSelectedFormat] = useState('csv');

    const handleExport = async () => {
        setExporting(true);
        try {
            await onExport(selectedFormat);
        } catch (error) {
            console.error('Export failed:', error);
        } finally {
            setExporting(false);
        }
    };

    return (
        <div className={`admin-export d-flex align-items-center ${className}`}>
            <select 
                className="form-select form-select-sm mr-2" 
                style={{ width: 'auto' }}
                value={selectedFormat}
                onChange={(e) => setSelectedFormat(e.target.value)}
            >
                {formats.map(format => (
                    <option key={format} value={format}>
                        {format.toUpperCase()}
                    </option>
                ))}
            </select>
            <Button
                size="sm"
                color="light"
                outline
                onClick={handleExport}
                disabled={exporting}
            >
                <Icon name="download" />
                {exporting ? 'Exporting...' : 'Export'}
            </Button>
        </div>
    );
};

export default AdminExport;
```

## Validation & Error Handling

### Form Validation Utilities
```js
// admin/src/utils/validation.js
import * as z from 'zod';

// Common admin validation schemas
export const adminSchemas = {
    user: z.object({
        name: z.string()
            .min(2, 'Name must be at least 2 characters')
            .max(100, 'Name must not exceed 100 characters'),
        email: z.string()
            .email('Invalid email address')
            .max(255, 'Email must not exceed 255 characters'),
        role: z.enum(['admin', 'manager', 'user'], {
            errorMap: () => ({ message: 'Invalid role selected' })
        }),
        is_active: z.boolean(),
        permissions: z.array(z.string()).optional()
    }),

    property: z.object({
        title: z.string()
            .min(5, 'Title must be at least 5 characters')
            .max(200, 'Title must not exceed 200 characters'),
        description: z.string()
            .min(20, 'Description must be at least 20 characters')
            .max(2000, 'Description must not exceed 2000 characters'),
        price: z.number()
            .min(0, 'Price must be positive')
            .max(1000000000, 'Price is too high'),
        location: z.string()
            .min(3, 'Location must be at least 3 characters'),
        status: z.enum(['draft', 'active', 'inactive', 'archived'])
    }),

    booking: z.object({
        user_id: z.number().int().positive('Invalid user'),
        property_id: z.number().int().positive('Invalid property'),
        check_in: z.string().refine(
            (date) => new Date(date) > new Date(),
            'Check-in date must be in the future'
        ),
        check_out: z.string(),
        guests: z.number().int().min(1).max(20),
        total_amount: z.number().min(0)
    }).refine(
        (data) => new Date(data.check_out) > new Date(data.check_in),
        {
            message: 'Check-out date must be after check-in date',
            path: ['check_out']
        }
    )
};

// Validation error formatter
export const formatValidationErrors = (errors) => {
    const formatted = {};
    
    if (errors.formErrors) {
        errors.formErrors.forEach(error => {
            const field = error.path?.[0];
            if (field) {
                formatted[field] = error.message;
            }
        });
    }
    
    return formatted;
};

// Server validation error handler
export const handleServerValidationErrors = (error, setError) => {
    if (error.response?.data?.validation_errors) {
        Object.entries(error.response.data.validation_errors).forEach(([field, messages]) => {
            setError(field, {
                type: 'server',
                message: Array.isArray(messages) ? messages[0] : messages
            });
        });
    }
};
```

## Data Management Best Practices

### Admin Data Flow
1. **Fetch** data using React Query hooks
2. **Display** data in DashLite components
3. **Validate** form inputs with Zod schemas
4. **Submit** changes via API services
5. **Update** cache and show feedback
6. **Handle** errors gracefully

### Performance Considerations
- Use pagination for large datasets
- Implement optimistic updates for better UX
- Cache frequently accessed data
- Debounce search and filter inputs
- Show loading states during operations

### Security Practices
- Validate all inputs on both client and server
- Sanitize data before display
- Implement proper authorization checks
- Log admin actions for audit trails
- Use HTTPS for all admin operations